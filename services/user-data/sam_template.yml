# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  user data api

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
  - AWS::Serverless-2016-10-31

Parameters:
  EnvType:
    Description: Environment type.
    Default: development
    Type: String
    AllowedValues:
      - production
      - staging
      - development
    ConstraintDescription: must specify production or staging or development.

Conditions:
  CreateProdResources: !Equals
    - !Ref EnvType
    - production
  CreateStagingResources: !Equals
    - !Ref EnvType
    - staging
  CreateDevResources: !Equals
    - !Ref EnvType
    - development

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  UserDataAuthServiceTokenStaging:
    Type: AWS::SSM::Parameter::Value<String>
    Default: '/services/user-data/authentication/staging/pass-key'
  UserDataAuthServiceTokenProduction:
    Type: AWS::SSM::Parameter::Value<String>
    Default: '/services/user-data/authentication/production/pass-key'
  UserDataAuthApiKeyStaging:
    Type: AWS::SSM::Parameter::Value<String>
    Default: '/services/user-data/authentication-api/production/pass-key'
  UserDataAuthApiKeyProduction:
    Type: AWS::SSM::Parameter::Value<String>
    Default: '/services/user-data/authentication-api/production/pass-key'
  UserDataCommsApiKeyStaging:
    Type: AWS::SSM::Parameter::Value<String>
    Default: '/services/user-data/comms-api/production/pass-key'
  UserDataCommsApiKeyProduction:
    Type: AWS::SSM::Parameter::Value<String>
    Default: '/services/user-data/comms-api/production/pass-key'

  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
  signUpFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: functions/sign-up/dist
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: sign up users
      Environment:
        Variables:
          ENVIRONMENT:
            !If [
              CreateProdResources,
              production,
              !If [CreateStagingResources, staging, development],
            ]
      Events:
        ApiDevelopment:
          Type: HttpApi
          Condition: CreateDevResources
          Properties:
            Path: /user/signup
            Method: POST
            ApiId: !Ref crudUserDataHttpApiDevelopment
        ApiStaging:
          Type: HttpApi
          Condition: CreateStagingResources
          Properties:
            Path: /user/signup
            Method: POST
            ApiId: !Ref crudUserDataHttpApiStaging
        ApiProd:
          Type: HttpApi
          Condition: CreateProdResources
          Properties:
            ApiId: !Ref crudUserDataHttpApiProduction
            Path: /user/signup
            Method: POST

  deleteUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: functions/delete-user/dist
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: delete users
      Environment:
        Variables:
          COMMS_API_KEY:
            !If [
              CreateProdResources,
              !Ref UserDataCommsApiKeyProduction,
              !If [CreateStagingResources, !Ref UserDataCommsApiKeyStaging, ''],
            ]
          ENVIRONMENT:
            !If [
              CreateProdResources,
              production,
              !If [CreateStagingResources, staging, development],
            ]
      Events:
        ApiDevelopment:
          Type: HttpApi
          Condition: CreateDevResources
          Properties:
            Path: /user/{user_id}/
            Method: DELETE
            ApiId: !Ref crudUserDataHttpApiDevelopment
        ApiStaging:
          Type: HttpApi
          Condition: CreateStagingResources
          Properties:
            Path: /user/{user_id}/
            Method: DELETE
            ApiId: !Ref crudUserDataHttpApiStaging
        ApiProd:
          Type: HttpApi
          Condition: CreateProdResources
          Properties:
            ApiId: !Ref crudUserDataHttpApiProduction
            Path: /user/{user_id}/
            Method: DELETE

  getUserDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: functions/get-user-data/dist
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: get data for a user
      Environment:
        Variables:
          AUTHENTICATION_SERVICE_TOKEN:
            !If [
              CreateProdResources,
              !Ref UserDataAuthServiceTokenProduction,
              !If [
                CreateStagingResources,
                !Ref UserDataAuthServiceTokenStaging,
                '',
              ],
            ]
          ENVIRONMENT:
            !If [
              CreateProdResources,
              production,
              !If [CreateStagingResources, staging, development],
            ]
      Events:
        ApiDevelopment:
          Type: HttpApi
          Condition: CreateDevResources
          Properties:
            Path: /user/details
            Method: POST
            ApiId: !Ref crudUserDataHttpApiDevelopment
        ApiStaging:
          Type: HttpApi
          Condition: CreateStagingResources
          Properties:
            Path: /user/details
            Method: POST
            ApiId: !Ref crudUserDataHttpApiStaging
        ApiProd:
          Type: HttpApi
          Condition: CreateProdResources
          Properties:
            ApiId: !Ref crudUserDataHttpApiProduction
            Path: /user/details
            Method: POST

  updateUserDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: functions/update-user-data/dist
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: update user data
      Environment:
        Variables:
          AUTHENTICATION_SERVICE_TOKEN:
            !If [
              CreateProdResources,
              !Ref UserDataAuthServiceTokenProduction,
              !If [
                CreateStagingResources,
                !Ref UserDataAuthServiceTokenStaging,
                '',
              ],
            ]
          AUTHENTICATION_API_KEY:
            !If [
              CreateProdResources,
              !Ref UserDataAuthApiKeyProduction,
              !If [CreateStagingResources, !Ref UserDataAuthApiKeyStaging, ''],
            ]
          COMMS_API_KEY:
            !If [
              CreateProdResources,
              !Ref UserDataCommsApiKeyProduction,
              !If [CreateStagingResources, !Ref UserDataCommsApiKeyStaging, ''],
            ]
          ENVIRONMENT:
            !If [
              CreateProdResources,
              production,
              !If [CreateStagingResources, staging, development],
            ]
      Events:
        ApiDevelopment:
          Type: HttpApi
          Condition: CreateDevResources
          Properties:
            Path: /user/{user_id}/{proxy+}
            Method: POST
            ApiId: !Ref crudUserDataHttpApiDevelopment
        ApiStaging:
          Type: HttpApi
          Condition: CreateStagingResources
          Properties:
            Path: /user/{user_id}/{proxy+}
            Method: POST
            ApiId: !Ref crudUserDataHttpApiStaging
        ApiProd:
          Type: HttpApi
          Condition: CreateProdResources
          Properties:
            ApiId: !Ref crudUserDataHttpApiProduction
            Path: /user/{user_id}/{proxy+}
            Method: POST

  listUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: functions/list-user/dist
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: list users who belong to a set of data
      Environment:
        Variables:
          ENVIRONMENT:
            !If [
              CreateProdResources,
              production,
              !If [CreateStagingResources, staging, development],
            ]
      Events:
        ApiDevelopment:
          Type: HttpApi
          Condition: CreateDevResources
          Properties:
            Path: /user/list
            Method: GET
            ApiId: !Ref crudUserDataHttpApiDevelopment
        ApiStaging:
          Type: HttpApi
          Condition: CreateStagingResources
          Properties:
            Path: /user/list
            Method: GET
            ApiId: !Ref crudUserDataHttpApiStaging
        ApiProd:
          Type: HttpApi
          Condition: CreateProdResources
          Properties:
            ApiId: !Ref crudUserDataHttpApiProduction
            Path: /user/list
            Method: GET

  crudUserDataHttpApiDevelopment:
    Type: AWS::Serverless::HttpApi
    Condition: CreateDevResources
    StageName: development
    Description: delete user from system
    DisableExecuteApiEndpoint: false

  crudUserDataHttpApiStaging:
    Type: AWS::Serverless::HttpApi
    Condition: CreateStagingResources
    StageName: staging
    Description: delete user from system
    DisableExecuteApiEndpoint: false

  crudUserDataHttpApiProduction:
    Type: AWS::Serverless::HttpApi
    Condition: CreateProdResources
    StageName: production
    Description: delete user from system
    DisableExecuteApiEndpoint: false
