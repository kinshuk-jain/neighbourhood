# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  photo upload api

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
  - AWS::Serverless-2016-10-31

Parameters:
  EnvType:
    Description: Environment type.
    Default: development
    Type: String
    AllowedValues:
      - production
      - staging
      - development
    ConstraintDescription: must specify production or staging or development.

Conditions:
  CreateProdResources: !Equals
    - !Ref EnvType
    - production
  CreateStagingResources: !Equals
    - !Ref EnvType
    - staging
  CreateDevResources: !Equals
    - !Ref EnvType
    - development

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  PhotoUploadLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: '2012-10-17'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - kms:Decrypt
                Effect: Allow
                Resource:
                  Fn::Sub:
                    - arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/*
            Version: '2012-10-17'
          PolicyName: PhotoUploadLambdaKmsAccess
        - PolicyDocument:
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: '*'
            Version: '2012-10-17'
          PolicyName: PhotoUploadLambdaBasicExecution

  S3UploadBucket:
    Type: AWS::S3::Bucket
    Properties:
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - PUT
              - POST
            # TODO: set allowed origin
            AllowedOrigins:
              - '*'

  createPresignedUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: functions/create-presigned-url/dist
      Runtime: nodejs12.x
      Role: PhotoUploadLambdaRole
      MemorySize: 128
      Timeout: 100
      Description: create pre signed post url for uploading photos
      Policies:
        - S3WritePolicy:
            BucketName: !Ref S3UploadBucket
        - Statement:
            - Effect: Allow
              Resource: !Sub 'arn:aws:s3:::${S3UploadBucket}/'
              Action:
                - s3:putObjectAcl
      Environment:
        Variables:
          UPLOAD_BUCKET_NAME: !Ref S3UploadBucket
          ENVIRONMENT:
            !If [
              CreateProdResources,
              production,
              !If [CreateStagingResources, staging, development],
            ]
      Events:
        ApiDevelopment:
          Type: HttpApi
          Condition: CreateDevResources
          Properties:
            Path: /photo-upload/uploads
            Method: GET
            ApiId: !Ref GetPresignedUrlApiDevelopment
        ApiStaging:
          Type: HttpApi
          Condition: CreateStagingResources
          Properties:
            Path: /photo-upload/uploads
            Method: GET
            ApiId: !Ref GetPresignedUrlApiStaging
        ApiProd:
          Type: HttpApi
          Condition: CreateProdResources
          Properties:
            ApiId: !Ref GetPresignedUrlApiProduction
            Path: /photo-upload/uploads
            Method: GET

  deletePhotoFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: functions/delete-photo/dist
      Runtime: nodejs12.x
      MemorySize: 128
      Role: PhotoUploadLambdaRole
      Timeout: 100
      Description: delete photo
      Policies:
        - S3WritePolicy:
            BucketName: !Ref S3UploadBucket
      Environment:
        Variables:
          UPLOAD_BUCKET_NAME: !Ref S3UploadBucket
          ENVIRONMENT:
            !If [
              CreateProdResources,
              production,
              !If [CreateStagingResources, staging, development],
            ]
      Events:
        ApiDevelopment:
          Type: HttpApi
          Condition: CreateDevResources
          Properties:
            Path: /photo-upload/uploads/{user_id}/{photo_id}
            Method: DELETE
            ApiId: !Ref GetPresignedUrlApiDevelopment
        ApiStaging:
          Type: HttpApi
          Condition: CreateStagingResources
          Properties:
            Path: /photo-upload/uploads/{user_id}/{photo_id}
            Method: DELETE
            ApiId: !Ref GetPresignedUrlApiStaging
        ApiProd:
          Type: HttpApi
          Condition: CreateProdResources
          Properties:
            ApiId: !Ref GetPresignedUrlApiProduction
            Path: /photo-upload/uploads/{user_id}/{photo_id}
            Method: DELETE

  GetPresignedUrlApiDevelopment:
    Type: AWS::Serverless::HttpApi
    Condition: CreateDevResources
    StageName: development
    Description: manage photos in development
    DisableExecuteApiEndpoint: false
    Properties:
      CorsConfiguration:
        AllowMethods:
          - GET
          - DELETE
          - OPTIONS
        AllowHeaders:
          - '*'
        AllowOrigins:
          - '*'

  GetPresignedUrlApiStaging:
    Type: AWS::Serverless::HttpApi
    Condition: CreateStagingResources
    StageName: staging
    Description: manage photos in staging
    DisableExecuteApiEndpoint: false
    Properties:
      CorsConfiguration:
        AllowMethods:
          - GET
          - DELETE
          - OPTIONS
        AllowHeaders:
          - '*'
        AllowOrigins:
          - '*'

  GetPresignedUrlApiProduction:
    Type: AWS::Serverless::HttpApi
    Condition: CreateProdResources
    StageName: production
    Description: manage photos in production
    DisableExecuteApiEndpoint: false
    Properties:
      CorsConfiguration:
        AllowMethods:
          - GET
          - DELETE
          - OPTIONS
        AllowHeaders:
          - '*'
        # TODO: set allowed origin for all allowed origin values in this template
        AllowOrigins:
          - '*'
