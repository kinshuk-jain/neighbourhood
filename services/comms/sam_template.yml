AWSTemplateFormatVersion: 2010-09-09
Description: >-
  comms-api for external communication

Transform:
  - AWS::Serverless-2016-10-31

Parameters:
  EnvType:
    Description: Environment type.
    Default: development
    Type: String
    AllowedValues:
      - production
      - staging
      - development
    ConstraintDescription: must specify production, staging or development.

Conditions:
  CreateProdResources: !Equals
    - !Ref EnvType
    - production
  CreateStagingResources: !Equals
    - !Ref EnvType
    - staging
  CreateDevResources: !Equals
    - !Ref EnvType
    - development

Resources:
  CommsLambdaBasicRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: '2012-10-17'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - kms:Decrypt
                Effect: Allow
                Resource:
                  Fn::Sub:
                    - arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/*
            Version: '2012-10-17'
          PolicyName: CommsLambdaKmsAccess
        - PolicyDocument:
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: '*'
            Version: '2012-10-17'
          PolicyName: CommsLambdaBasicExecution

  CommsAuthServiceTokenStaging:
    Type: AWS::SSM::Parameter::Value<String>
    Default: '/services/comms/authentication/staging/pass-key'
  CommsAuthServiceTokenProduction:
    Type: AWS::SSM::Parameter::Value<String>
    Default: '/services/comms/authentication/production/pass-key'
  CommsSocietyMgmtServiceTokenStaging:
    Type: AWS::SSM::Parameter::Value<String>
    Default: '/services/comms/society-mgmt/staging/pass-key'
  CommsSocietyMgmtServiceTokenProduction:
    Type: AWS::SSM::Parameter::Value<String>
    Default: '/services/comms/society-mgmt/production/pass-key'
  CommsUserDataServiceTokenStaging:
    Type: AWS::SSM::Parameter::Value<String>
    Default: '/services/comms/user-data/staging/pass-key'
  CommsUserDataServiceTokenProduction:
    Type: AWS::SSM::Parameter::Value<String>
    Default: '/services/comms/user-data/production/pass-key'

  sendEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: functions/sendEmail/src/index.handler
      CodeUri: functions/sendEmail/dist
      Runtime: nodejs12.x
      MemorySize: 128
      Role: CommsLambdaBasicRole
      Timeout: 100
      Description: send emails
      Policies:
        - SESCrudPolicy:
            IdentityName: 'blah@neighbourhood.com' # TODO - add domain name from which emails will be sent
      Environment:
        Variables:
          USER_DATA_SERVICE_TOKEN:
            !If [
              CreateProdResources,
              CommsUserDataServiceTokenProduction,
              !If [
                CreateStagingResources,
                CommsUserDataServiceTokenStaging,
                '',
              ],
            ]
          SOCIETY_MGMT_SERVICE_TOKEN:
            !If [
              CreateProdResources,
              CommsSocietyMgmtServiceTokenProduction,
              !If [
                CreateStagingResources,
                CommsSocietyMgmtServiceTokenStaging,
                '',
              ],
            ]
          AUTHENTICATION_SERVICE_TOKEN:
            !If [
              CreateProdResources,
              CommsAuthServiceTokenProduction,
              !If [CreateStagingResources, CommsAuthServiceTokenStaging, ''],
            ]
          ENVIRONMENT:
            !If [
              CreateProdResources,
              production,
              !If [CreateStagingResources, staging, development],
            ]
      Events:
        ApiDevelopment:
          Type: HttpApi
          Condition: CreateDevResources
          Properties:
            Path: /comms/email/{proxy+}
            Method: POST
            RestApiId: !Ref commsApiDevelopment
        ApiStaging:
          Type: HttpApi
          Condition: CreateStagingResources
          Properties:
            Path: /comms/email/{proxy+}
            Method: POST
            RestApiId: !Ref commsApiStaging
        ApiProd:
          Type: HttpApi
          Condition: CreateProdResources
          Properties:
            RestApiId: !Ref commsApiProduction
            Path: /comms/email/{proxy+}
            Method: POST

  # TODO: define IAM policies and roles for this lambda to allow it to access SNS
  sendNotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: functions/sendNotification/src/index.handler
      CodeUri: functions/sendNotification/dist
      Runtime: nodejs12.x
      Role: CommsLambdaBasicRole
      MemorySize: 128
      Timeout: 100
      Description: send emails
      Environment:
        Variables:
          USER_DATA_SERVICE_TOKEN:
            !If [
              CreateProdResources,
              CommsUserDataServiceTokenProduction,
              !If [
                CreateStagingResources,
                CommsUserDataServiceTokenStaging,
                '',
              ],
            ]
          SOCIETY_MGMT_SERVICE_TOKEN:
            !If [
              CreateProdResources,
              CommsSocietyMgmtServiceTokenProduction,
              !If [
                CreateStagingResources,
                CommsSocietyMgmtServiceTokenStaging,
                '',
              ],
            ]
          ENVIRONMENT:
            !If [
              CreateProdResources,
              production,
              !If [CreateStagingResources, staging, development],
            ]
      Events:
        ApiDevelopment:
          Type: HttpApi
          Condition: CreateDevResources
          Properties:
            Path: /comms/notification/{proxy+}
            Method: POST
            ApiId: !Ref commsApiDevelopment
        ApiStaging:
          Type: HttpApi
          Condition: CreateStagingResources
          Properties:
            Path: /comms/notification/{proxy+}
            Method: POST
            ApiId: !Ref commsApiStaging
        ApiProd:
          Type: HttpApi
          Condition: CreateProdResources
          Properties:
            ApiId: !Ref commsApiProduction
            Path: /comms/notification/{proxy+}
            Method: POST

  commsApiDevelopment:
    Type: AWS::Serverless::HttpApi
    Condition: CreateDevResources
    StageName: development
    Description: send comms to users
    DisableExecuteApiEndpoint: false

  commsApiStaging:
    Type: AWS::Serverless::HttpApi
    Condition: CreateStagingResources
    StageName: staging
    Description: send comms to users
    DisableExecuteApiEndpoint: false

  commsApiProduction:
    Type: AWS::Serverless::HttpApi
    Condition: CreateStagingResources
    StageName: production
    Description: send comms to users
    DisableExecuteApiEndpoint: false
