# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  comms-api for external communication

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
  - AWS::Serverless-2016-10-31

Parameters:
  EnvType:
    Description: Environment type.
    Default: development
    Type: String
    AllowedValues:
      - production
      - staging
      - development
    ConstraintDescription: must specify production, staging or development.

Conditions:
  CreateProdResources: !Equals
    - !Ref EnvType
    - production
  CreateStagingResources: !Equals
    - !Ref EnvType
    - staging
  CreateDevResources: !Equals
    - !Ref EnvType
    - development

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
  # TODO: define IAM policies and roles for this lambda to allow it to access SES
  sendEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: dist/index.handler
      CodeUri: functions/sendEmail
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: send emails
      Environment:
        Variables:
          ENVIRONMENT:
            !If [
              CreateProdResources,
              production,
              !If [CreateStagingResources, staging, development],
            ]
      Events:
        ApiDevelopment:
          Type: Api
          Condition: CreateDevResources
          Properties:
            Path: /comms/email/{proxy+}
            Method: ANY
            RestApiId: !Ref sendEmailApiDevelopment
        ApiStaging:
          Type: Api
          Condition: CreateStagingResources
          Properties:
            Path: /comms/email/{proxy+}
            Method: ANY
            RestApiId: !Ref sendEmailApiStaging
        ApiProd:
          Type: Api
          Condition: CreateProdResources
          Properties:
            RestApiId: !Ref sendEmailApiProd
            Path: /comms/email/{proxy+}
            Method: ANY

  sendEmailApiDevelopment:
    Type: AWS::Serverless::Api
    Condition: CreateDevResources
    Properties:
      Tags:
        Name: comms-api-development
      StageName: development
      Models:
        BodyValidate:
          type: object
          required:
            - template
            - params
            - from
            - subject
            - recipients
          properties:
            template:
              type: string
            params:
              type: object
            subject:
              type: string
            recipients:
              type: array
      Auth:
        DefaultAuthorizer: AWS_IAM
      MethodSettings:
        CachingEnabled: false
        MetricsEnabled: true
      GatewayResponses:
        ACCESS_DENIED:
          StatusCode: 404
          ResponseTemplates:
            'application/json': '{"error": not found }'
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
        AUTHORIZER_FAILURE:
          StatusCode: 404
          ResponseTemplates:
            'application/json': '{"error": not found }'
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
        UNAUTHORIZED:
          StatusCode: 404
          ResponseTemplates:
            'application/json': '{"error": not found }'
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"

  sendEmailApiStaging:
    Type: AWS::Serverless::Api
    Condition: CreateStagingResources
    Properties:
      Tags:
        Name: comms-api-staging
      StageName: staging
      Models:
        BodyValidate:
          type: object
          required:
            - template
            - params
            - from
            - subject
            - recipients
          properties:
            template:
              type: string
            params:
              type: object
            subject:
              type: string
            recipients:
              type: array
      Auth:
        DefaultAuthorizer: AWS_IAM
      MethodSettings:
        CachingEnabled: false
        MetricsEnabled: true
      GatewayResponses:
        ACCESS_DENIED:
          StatusCode: 404
          ResponseTemplates:
            'application/json': '{"error": not found }'
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
        AUTHORIZER_FAILURE:
          StatusCode: 404
          ResponseTemplates:
            'application/json': '{"error": not found }'
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
        UNAUTHORIZED:
          StatusCode: 404
          ResponseTemplates:
            'application/json': '{"error": not found }'
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"

  sendEmailApiProd:
    Type: AWS::Serverless::Api
    Condition: CreateProdResources
    Properties:
      Tags:
        Name: comms-api-production
      StageName: production
      Models:
        BodyValidate:
          type: object
          required:
            - template
            - params
            - from
            - subject
            - recipients
          properties:
            template:
              type: string
            params:
              type: object
            subject:
              type: string
            recipients:
              type: array
      Auth:
        DefaultAuthorizer: AWS_IAM
      MethodSettings:
        CachingEnabled: false
        MetricsEnabled: true
      GatewayResponses:
        ACCESS_DENIED:
          StatusCode: 404
          ResponseTemplates:
            'application/json': '{"error": not found }'
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
        AUTHORIZER_FAILURE:
          StatusCode: 404
          ResponseTemplates:
            'application/json': '{"error": not found }'
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
        UNAUTHORIZED:
          StatusCode: 404
          ResponseTemplates:
            'application/json': '{"error": not found }'
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
