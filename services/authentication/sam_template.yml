# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  authentication and access control api

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
  - AWS::Serverless-2016-10-31

Parameters:
  EnvType:
    Description: Environment type.
    Default: development
    Type: String
    AllowedValues:
      - production
      - staging
      - development
    ConstraintDescription: must specify production or staging or development.

Conditions:
  CreateProdResources: !Equals
    - !Ref EnvType
    - production
  CreateStagingResources: !Equals
    - !Ref EnvType
    - staging
  CreateDevResources: !Equals
    - !Ref EnvType
    - development

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  AuthenticationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: '2012-10-17'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - kms:Decrypt
                Effect: Allow
                Resource:
                  Fn::Sub:
                    - arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/*
            Version: '2012-10-17'
          PolicyName: AuthenticationLambdaKmsAccess
        - PolicyDocument:
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: '*'
            Version: '2012-10-17'
          PolicyName: AuthenticationLambdaBasicExecution

  AuthCommsApiKeyStaging:
    Type: AWS::SSM::Parameter::Value<String>
    Default: '/services/authentication/comms-api/staging/pass-key'
  AuthCommsApiKeyProduction:
    Type: AWS::SSM::Parameter::Value<String>
    Default: '/services/authentication/comms-api/production/pass-key'
  AuthUserDataApiKeyStaging:
    Type: AWS::SSM::Parameter::Value<String>
    Default: '/services/authentication/user-data-api/staging/pass-key'
  AuthUserDataApiKeyProduction:
    Type: AWS::SSM::Parameter::Value<String>
    Default: '/services/authentication/user-data-api/production/pass-key'
  PvtKeyStaging:
    Type: AWS::SSM::Parameter::Value<String>
    Default: '/services/authentication/verify-login-token/staging/pvt-key'
  PvtKeyProduction:
    Type: AWS::SSM::Parameter::Value<String>
    Default: '/services/authentication/verify-login-token/production/pvt-key'
  PubKeyStaging:
    Type: AWS::SSM::Parameter::Value<String>
    Default: '/services/authentication/send-public-key/staging/pub-key'
  PubKeyProduction:
    Type: AWS::SSM::Parameter::Value<String>
    Default: '/services/authentication/send-public-key/production/pub-key'
  KeyPassStaging:
    Type: AWS::SSM::Parameter::Value<String>
    Default: '/services/authentication/verify-login-token/staging/key-pass'
  KeyPassProduction:
    Type: AWS::SSM::Parameter::Value<String>
    Default: '/services/authentication/verify-login-token/production/key-pass'
  AuthUserDataServiceTokenStaging:
    Type: AWS::SSM::Parameter::Value<String>
    Default: '/services/authentication/user-data/staging/pass-key'
  AuthUserDataServiceTokenProduction:
    Type: AWS::SSM::Parameter::Value<String>
    Default: '/services/authentication/user-data/production/pass-key'

  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
  signOutFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: functions/sign-out/dist
      Runtime: nodejs12.x
      MemorySize: 128
      Role: !Ref AuthenticationLambdaRole
      Timeout: 100
      Description: sign out users
      Environment:
        Variables:
          ENVIRONMENT:
            !If [
              CreateProdResources,
              production,
              !If [CreateStagingResources, staging, development],
            ]
      Events:
        ApiDevelopment:
          Type: HttpApi
          Condition: CreateDevResources
          Properties:
            Path: /authentication/signout
            Method: POST
            ApiId: !Ref oauth2HttpApiDevelopment
        ApiStaging:
          Type: HttpApi
          Condition: CreateStagingResources
          Properties:
            Path: /authentication/signout
            Method: POST
            ApiId: !Ref oauth2HttpApiStaging
        ApiProd:
          Type: HttpApi
          Condition: CreateProdResources
          Properties:
            Path: /authentication/signout
            Method: POST
            ApiId: !Ref oauth2HttpApiProduction

  manageAliasFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: functions/manage-alias/dist
      Runtime: nodejs12.x
      MemorySize: 128
      Role: !Ref AuthenticationLambdaRole
      Timeout: 100
      Description: manage aliases
      Environment:
        Variables:
          ENVIRONMENT:
            !If [
              CreateProdResources,
              production,
              !If [CreateStagingResources, staging, development],
            ]
      Events:
        ApiDevelopment:
          Type: HttpApi
          Condition: CreateDevResources
          Properties:
            Path: /authentication/alias/
            Method: ANY
            ApiId: !Ref oauth2HttpApiDevelopment
        ApiStaging:
          Type: HttpApi
          Condition: CreateStagingResources
          Properties:
            Path: /authentication/alias/
            Method: ANY
            ApiId: !Ref oauth2HttpApiStaging
        ApiProd:
          Type: HttpApi
          Condition: CreateProdResources
          Properties:
            Path: /authentication/alias/
            Method: ANY
            ApiId: !Ref oauth2HttpApiProduction

  updateUserScopeFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: functions/update-user-scope/dist
      Runtime: nodejs12.x
      MemorySize: 128
      Role: !Ref AuthenticationLambdaRole
      Timeout: 100
      Description: update user authorization scope
      Environment:
        Variables:
          USER_DATA_SERVICE_TOKEN:
            !If [
              CreateProdResources,
              !Ref AuthUserDataServiceTokenProduction,
              !If [
                CreateStagingResources,
                !Ref AuthUserDataServiceTokenStaging,
                '',
              ],
            ]
          ENVIRONMENT:
            !If [
              CreateProdResources,
              production,
              !If [CreateStagingResources, staging, development],
            ]
      Events:
        ApiDevelopment:
          Type: HttpApi
          Condition: CreateDevResources
          Properties:
            Path: /authentication/authorization
            Method: PUT
            ApiId: !Ref oauth2HttpApiDevelopment
        ApiStaging:
          Type: HttpApi
          Condition: CreateStagingResources
          Properties:
            Path: /authentication/authorization
            Method: PUT
            ApiId: !Ref oauth2HttpApiStaging
        ApiProd:
          Type: HttpApi
          Condition: CreateProdResources
          Properties:
            Path: /authentication/authorization
            Method: PUT
            ApiId: !Ref oauth2HttpApiProduction

  sendPublicKeyFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: functions/send-public-key/dist
      Runtime: nodejs12.x
      MemorySize: 128
      Role: !Ref AuthenticationLambdaRole
      Timeout: 100
      Description: send public key for token validation
      Environment:
        Variables:
          PUB_KEY:
            !If [
              CreateProdResources,
              !Ref PubKeyProduction,
              !If [CreateStagingResources, !Ref PubKeyStaging, ''],
            ]
          ENVIRONMENT:
            !If [
              CreateProdResources,
              production,
              !If [CreateStagingResources, staging, development],
            ]
      Events:
        ApiDevelopment:
          Type: HttpApi
          Condition: CreateDevResources
          Properties:
            Path: /.well-known/jwks.json
            Method: GET
            ApiId: !Ref wellKnownHttpApiDevelopment
        ApiStaging:
          Type: HttpApi
          Condition: CreateStagingResources
          Properties:
            Path: /.well-known/jwks.json
            Method: GET
            ApiId: !Ref wellKnownHttpApiStaging
        ApiProd:
          Type: HttpApi
          Condition: CreateProdResources
          Properties:
            Path: /.well-known/jwks.json
            Method: GET
            ApiId: !Ref wellKnownHttpApiProduction

  verifyLoginTokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: functions/verify-login-token/dist
      Runtime: nodejs12.x
      MemorySize: 128
      Role: !Ref AuthenticationLambdaRole
      Timeout: 100
      Description: generate access and refresh tokens
      Environment:
        Variables:
          USER_DATA_API_KEY:
            !If [
              CreateProdResources,
              !Ref AuthUserDataApiKeyProduction,
              !If [CreateStagingResources, !Ref AuthUserDataApiKeyStaging, ''],
            ]
          PVT_KEY:
            !If [
              CreateProdResources,
              !Ref PvtKeyProduction,
              !If [CreateStagingResources, !Ref PvtKeyStaging, ''],
            ]
          KEY_PASS:
            !If [
              CreateProdResources,
              !Ref KeyPassProduction,
              !If [CreateStagingResources, !Ref KeyPassStaging, ''],
            ]
          ENVIRONMENT:
            !If [
              CreateProdResources,
              production,
              !If [CreateStagingResources, staging, development],
            ]
      Events:
        ApiDevelopment:
          Type: HttpApi
          Condition: CreateDevResources
          Properties:
            Path: /authentication/oauth2/token
            Method: POST
            ApiId: !Ref oauth2HttpApiDevelopment
        ApiStaging:
          Type: HttpApi
          Condition: CreateStagingResources
          Properties:
            Path: /authentication/oauth2/token
            Method: POST
            ApiId: !Ref oauth2HttpApiStaging
        ApiProd:
          Type: HttpApi
          Condition: CreateProdResources
          Properties:
            Path: /authentication/oauth2/token
            Method: POST
            ApiId: !Ref oauth2HttpApiProduction

  generateLoginTokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: functions/generate-login-token/dist
      Runtime: nodejs12.x
      Role: !Ref AuthenticationLambdaRole
      MemorySize: 128
      Timeout: 100
      Description: generate login token
      Environment:
        Variables:
          USER_DATA_API_KEY:
            !If [
              CreateProdResources,
              !Ref AuthUserDataApiKeyProduction,
              !If [CreateStagingResources, !Ref AuthUserDataApiKeyStaging, ''],
            ]
          COMMS_API_KEY:
            !If [
              CreateProdResources,
              !Ref AuthCommsApiKeyProduction,
              !If [CreateStagingResources, !Ref AuthCommsApiKeyStaging, ''],
            ]
          ENVIRONMENT:
            !If [
              CreateProdResources,
              production,
              !If [CreateStagingResources, staging, development],
            ]
      Events:
        ApiDevelopment:
          Type: HttpApi
          Condition: CreateDevResources
          Properties:
            Path: /authentication/oauth2/authorize
            Method: POST
            ApiId: !Ref oauth2HttpApiDevelopment
        ApiStaging:
          Type: HttpApi
          Condition: CreateStagingResources
          Properties:
            Path: /authentication/oauth2/authorize
            Method: POST
            ApiId: !Ref oauth2HttpApiStaging
        ApiProd:
          Type: HttpApi
          Condition: CreateProdResources
          Properties:
            ApiId: !Ref oauth2HttpApiProduction
            Path: /authentication/oauth2/authorize
            Method: POST

  oauth2HttpApiDevelopment:
    Type: AWS::Serverless::HttpApi
    Condition: CreateDevResources
    StageName: development
    Description: issue access and refresh tokens
    DisableExecuteApiEndpoint: false

  oauth2HttpApiStaging:
    Type: AWS::Serverless::HttpApi
    Condition: CreateStagingResources
    StageName: staging
    Description: issue access and refresh tokens
    DisableExecuteApiEndpoint: false

  oauth2HttpApiProduction:
    Type: AWS::Serverless::HttpApi
    Condition: CreateProdResources
    StageName: production
    Description: issue access and refresh tokens
    DisableExecuteApiEndpoint: false

  wellKnownHttpApiDevelopment:
    Type: AWS::Serverless::HttpApi
    Condition: CreateStagingResources
    StageName: development
    Description: send public keys
    DisableExecuteApiEndpoint: false

  wellKnownHttpApiStaging:
    Type: AWS::Serverless::HttpApi
    Condition: CreateStagingResources
    StageName: staging
    Description: send public keys
    DisableExecuteApiEndpoint: false

  wellKnownHttpApiProduction:
    Type: AWS::Serverless::HttpApi
    Condition: CreateProdResources
    StageName: production
    Description: send public keys
    DisableExecuteApiEndpoint: false

  refreshTokenDynamoDBTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: token
        Type: String
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
      TableName: authentication-refresh-token

  authorizationCodeDynamoDBTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: code
        Type: String
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
      TableName: authentication-authorization-code
