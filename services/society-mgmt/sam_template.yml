# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  society-mgmt for CRUD operations

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
  - AWS::Serverless-2016-10-31

Parameters:
  EnvType:
    Description: Environment type.
    Default: development
    Type: String
    AllowedValues:
      - production
      - staging
      - development
    ConstraintDescription: must specify production or staging or development.

Conditions:
  CreateProdResources: !Equals
    - !Ref EnvType
    - production
  CreateStagingResources: !Equals
    - !Ref EnvType
    - staging
  CreateDevResources: !Equals
    - !Ref EnvType
    - development

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  SocietyMgmtLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: '2012-10-17'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - kms:Decrypt
                Effect: Allow
                Resource:
                  Fn::Sub:
                    - arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/*
            Version: '2012-10-17'
          PolicyName: SocietyMgmtLambdaKmsAccess
        - PolicyDocument:
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: '*'
            Version: '2012-10-17'
          PolicyName: SocietyMgmtLambdaBasicExecution

  SocietyMgmtCommsApiKeyStaging:
    Type: AWS::SSM::Parameter::Value<String>
    Default: '/services/society-mgmt/comms-api/staging/pass-key'
  SocietyMgmtCommsApiKeyProduction:
    Type: AWS::SSM::Parameter::Value<String>
    Default: '/services/society-mgmt/comms-api/production/pass-key'
  SocietyMgmtGeocodingApiKeyStaging:
    Type: AWS::SSM::Parameter::Value<String>
    Default: '/services/society-mgmt/google-api/staging/pass-key'
  SocietyMgmtGeocodingApiKeyProduction:
    Type: AWS::SSM::Parameter::Value<String>
    Default: '/services/society-mgmt/google-api/production/pass-key'
  SocietyMgmtUserDataApiKeyProduction:
    Type: AWS::SSM::Parameter::Value<String>
    Default: '/services/society-mgmt/user-data-api/production/pass-key'
  SocietyMgmtUserDataApiKeyStaging:
    Type: AWS::SSM::Parameter::Value<String>
    Default: '/services/society-mgmt/user-data-api/staging/pass-key'

  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
  createSocietyFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: functions/create-society/dist
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Role: SocietyMgmtLambdaRole
      Description: create society
      Environment:
        Variables:
          COMMS_API_KEY:
            !If [
              CreateProdResources,
              !Ref SocietyMgmtCommsApiKeyProduction,
              !If [
                CreateStagingResources,
                !Ref SocietyMgmtCommsApiKeyStaging,
                '',
              ],
            ]
          GOOGLE_GEOCODING_API_KEY:
            !If [
              CreateProdResources,
              !Ref SocietyMgmtGeocodingApiKeyProduction,
              !If [
                CreateStagingResources,
                !Ref SocietyMgmtGeocodingApiKeyStaging,
                '',
              ],
            ]
          ENVIRONMENT:
            !If [
              CreateProdResources,
              production,
              !If [CreateStagingResources, staging, development],
            ]
      Events:
        ApiDevelopment:
          Type: HttpApi
          Condition: CreateDevResources
          Properties:
            Path: /society
            Method: POST
            ApiId: !Ref crudHttpApiDevelopment
        ApiStaging:
          Type: HttpApi
          Condition: CreateStagingResources
          Properties:
            Path: /society
            Method: POST
            ApiId: !Ref crudHttpApiStaging
        ApiProd:
          Type: HttpApi
          Condition: CreateProdResources
          Properties:
            ApiId: !Ref crudHttpApiProduction
            Path: /society
            Method: POST

  readSocietyFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: functions/read-society/dist
      Runtime: nodejs12.x
      MemorySize: 128
      Role: SocietyMgmtLambdaRole
      Timeout: 100
      Description: get data for a society
      Environment:
        Variables:
          ENVIRONMENT:
            !If [
              CreateProdResources,
              production,
              !If [CreateStagingResources, staging, development],
            ]
      Events:
        ApiDevelopment:
          Type: HttpApi
          Condition: CreateDevResources
          Properties:
            Path: /society/{society_id}/{proxy+}
            Method: GET
            ApiId: !Ref crudHttpApiDevelopment
        ApiStaging:
          Type: HttpApi
          Condition: CreateStagingResources
          Properties:
            Path: /society/{society_id}/{proxy+}
            Method: GET
            ApiId: !Ref crudHttpApiStaging
        ApiProd:
          Type: HttpApi
          Condition: CreateProdResources
          Properties:
            ApiId: !Ref crudHttpApiProduction
            Path: /society/{society_id}/{proxy+}
            Method: GET

  listSocietyFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: functions/list-society/dist
      Runtime: nodejs12.x
      Role: SocietyMgmtLambdaRole
      MemorySize: 128
      Timeout: 100
      Description: get data for societies that belong to a subset
      Environment:
        Variables:
          ENVIRONMENT:
            !If [
              CreateProdResources,
              production,
              !If [CreateStagingResources, staging, development],
            ]
      Events:
        ApiDevelopment:
          Type: HttpApi
          Condition: CreateDevResources
          Properties:
            Path: /society/list/
            Method: GET
            ApiId: !Ref crudHttpApiDevelopment
        ApiStaging:
          Type: HttpApi
          Condition: CreateStagingResources
          Properties:
            Path: /society/list/
            Method: GET
            ApiId: !Ref crudHttpApiStaging
        ApiProd:
          Type: HttpApi
          Condition: CreateProdResources
          Properties:
            ApiId: !Ref crudHttpApiProduction
            Path: /society/list/
            Method: GET

  deleteSocietyFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: functions/delete-society/dist
      Runtime: nodejs12.x
      Role: SocietyMgmtLambdaRole
      MemorySize: 128
      Timeout: 100
      Description: delete society
      Environment:
        Variables:
          ENVIRONMENT:
            !If [
              CreateProdResources,
              production,
              !If [CreateStagingResources, staging, development],
            ]
      Events:
        ApiDevelopment:
          Type: HttpApi
          Condition: CreateDevResources
          Properties:
            Path: /society/{society_id}
            Method: DELETE
            ApiId: !Ref crudHttpApiDevelopment
        ApiStaging:
          Type: HttpApi
          Condition: CreateStagingResources
          Properties:
            Path: /society/{society_id}
            Method: DELETE
            ApiId: !Ref crudHttpApiStaging
        ApiProd:
          Type: HttpApi
          Condition: CreateProdResources
          Properties:
            ApiId: !Ref crudHttpApiProduction
            Path: /society/{society_id}
            Method: DELETE

  updateSocietyFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: functions/update-society/dist
      Runtime: nodejs12.x
      MemorySize: 128
      Role: SocietyMgmtLambdaRole
      Timeout: 100
      Description: update society data
      Environment:
        Variables:
          COMMS_API_KEY:
            !If [
              CreateProdResources,
              !Ref SocietyMgmtCommsApiKeyProduction,
              !If [
                CreateStagingResources,
                !Ref SocietyMgmtCommsApiKeyStaging,
                '',
              ],
            ]
          USER_DATA_API_KEY:
            !If [
              CreateProdResources,
              !Ref SocietyMgmtUserDataApiKeyProduction,
              !If [
                CreateStagingResources,
                !Ref SocietyMgmtUserDataApiKeyStaging,
                '',
              ],
            ]
          GOOGLE_GEOCODING_API_KEY:
            !If [
              CreateProdResources,
              !Ref SocietyMgmtGeocodingApiKeyProduction,
              !If [
                CreateStagingResources,
                !Ref SocietyMgmtGeocodingApiKeyStaging,
                '',
              ],
            ]
          ENVIRONMENT:
            !If [
              CreateProdResources,
              production,
              !If [CreateStagingResources, staging, development],
            ]
      Events:
        ApiDevelopment:
          Type: HttpApi
          Condition: CreateDevResources
          Properties:
            Path: /society/{society_id}/{proxy+}/
            Method: POST
            ApiId: !Ref crudHttpApiDevelopment
        ApiStaging:
          Type: HttpApi
          Condition: CreateStagingResources
          Properties:
            Path: /society/{society_id}/{proxy+}/
            Method: POST
            ApiId: !Ref crudHttpApiStaging
        ApiProd:
          Type: Api
          Condition: CreateProdResources
          Properties:
            ApiId: !Ref crudHttpApiProduction
            Path: /society/{society_id}/{proxy+}/
            Method: POST

  # Add a lambda authorizer to authenticate api access
  crudHttpApiDevelopment:
    Type: AWS::Serverless::HttpApi
    Condition: CreateDevResources
    StageName: development
    Description: crud api for society management
    DisableExecuteApiEndpoint: false

  crudHttpApiStaging:
    Type: AWS::Serverless::HttpApi
    Condition: CreateStagingResources
    StageName: staging
    Description: crud api for society management
    DisableExecuteApiEndpoint: false

  crudHttpApiProduction:
    Type: AWS::Serverless::HttpApi
    Condition: CreateProdResources
    StageName: production
    Description: crud api for society management
    DisableExecuteApiEndpoint: false

  # updateSocietyApiProd:
  #   Type: AWS::Serverless::Api
  #   Condition: CreateProdResources
  #   Properties:
  #     Tags:
  #       Name: update-society-api-production
  #     StageName: production
  #     Models:
  #       BodyValidate:
  #         type: object
  #         required:
  #           - template
  #           - params
  #           - from
  #           - subject
  #           - recipients
  #         properties:
  #           template:
  #             type: string
  #           params:
  #             type: object
  #           subject:
  #             type: string
  #           recipients:
  #             type: array
  #     Auth:
  #       DefaultAuthorizer: AWS_IAM
  #     MethodSettings:
  #       CachingEnabled: false
  #       MetricsEnabled: true
  #     GatewayResponses:
  #       ACCESS_DENIED:
  #         StatusCode: 404
  #         ResponseTemplates:
  #           'application/json': '{"error": not found }'
  #         ResponseParameters:
  #           Headers:
  #             Access-Control-Allow-Origin: "'*'"
  #       AUTHORIZER_FAILURE:
  #         StatusCode: 404
  #         ResponseTemplates:
  #           'application/json': '{"error": not found }'
  #         ResponseParameters:
  #           Headers:
  #             Access-Control-Allow-Origin: "'*'"
  #       UNAUTHORIZED:
  #         StatusCode: 404
  #         ResponseTemplates:
  #           'application/json': '{"error": not found }'
  #         ResponseParameters:
  #           Headers:
  #             Access-Control-Allow-Origin: "'*'"
